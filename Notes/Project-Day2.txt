step14:
--------
	Add routing logic to EmployeeListComponent.js file.

App.js 
------
import React from 'react'
import HeaderComponent from './components/HeaderComponent'
import EmployeeListComponent from './components/EmployeeListComponent'
import FooterComponent from './components/FooterComponent'
import './App.css';
import {BrowserRouter, Routes, Route} from 'react-router-dom';


function App() {
  return (
    <div className='bgColor'>
        <HeaderComponent/>

        <BrowserRouter>
                <div className='container mt-5'>
                    <Routes>
                          <Route exact path='/' element={<EmployeeListComponent/>}></Route>
                          <Route path='/employees' element={<EmployeeListComponent/>}></Route>
                    </Routes>
                </div>
        </BrowserRouter>
        
        <FooterComponent/>
    </div>
  )
}

export default App

step15:
------
	Test the application by using below request url.
	ex:
		http://localhost:3000/
		http://localhost:3000/employees


step16:
-------
	Install react simple typewriter dependency using npm command.
	ex:
		npm install  react-simple-typewriter


step17:
------
	Add the typewriter effect logic inside EmployeeListComponent.js file.


EmployeeListComponent.js 
------------------------
import React from 'react'
import { useState } from 'react';
import {useTypewriter,Cursor} from 'react-simple-typewriter'

function EmployeeListComponent() 
{
    const [text] = useTypewriter({
        words: ["List", "Details", "Info"],
        loop:true,
        typeSpeed:120,
        deleteSpeed:80
    })

  const [employees,setEmployees]= useState([]);

  return (
    <div className='container mt-3'>
        <h4 className='text-center'> Employee {text}<Cursor/> </h4>
        <div className='row mt-5'>
            <table className='table table-bordered table-striped'>
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name </th>
                        <th>DOJ</th>
                        <th>Department</th>
                        <th>Designation</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {
                        employees.map(employee =>{
                            return <tr key={employee.id}>
                                        <td>employee.id</td>
                                        <td>employee.name</td>
                                        <td>employee.doj</td>
                                        <td>employee.dept.deptName</td>
                                        <td>employee.dept.designation</td>
                                    </tr>
                        })
                    }
                </tbody>
            </table>
        </div>
    </div>
  )
}

export default EmployeeListComponent



Project structure 
==================
backend
|
|---src/main/java
|	|
	|---com.ihub.www
	|
	|---com.ihub.www.controller
		|
		|---EmployeeController.java

	|---com.ihub.www.service
		|
		|---EmployeeService.java

	|---com.ihub.www.repo
		|
		|---EmployeeRepository.java (interface)
		|---DepartmentRepository.java (interface)
	
	|---com.ihub.www.model
		|
		|---Employee.java
		|---Department.java

	|---com.ihub.www.exception 
		|
		|---ResourceNotFoundException.java

|---src/main/resources
|	|
	|---application.properties 

|---src/test/java
|
|---pom.xml 

step18:
-------
	Create a spring boot starter project i.e backend.
	ex:
		starters:
				Spring Web 
				Spring Data JPA
				MYSQL Driver 
				Lombok
				Spring Boot DevTools


step19:
-------
	Create a Employee model class inside "com.ihub.www.model" package.

Employee.java
-----------
package com.ihub.www.model;

import java.util.Date;

import org.springframework.transaction.annotation.Transactional;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name="employees")
@Transactional
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Employee 
{
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	
	@Column
	private String name;
	
	@JsonFormat(shape= JsonFormat.Shape.STRING,pattern = "dd-MM-yyyy")
	private Date doj;
	
	@OneToOne(cascade = CascadeType.ALL) 
	@JoinColumn(name = "deptId")
	private Department dept;
}

step20:
------
	Create a Department model class inside "com.ihub.www.model" package.

Department.java
----------------
package com.ihub.www.model;

import org.springframework.transaction.annotation.Transactional;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table
@Transactional
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Department 
{
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private long deptId;
	
	@Column
	private String deptName;
	
	@Column
	private String designation;
}

step21:
------
	Create a EmployeeRepository inside "com.ihub.www.repo" package.

EmployeeRepository.java
------------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long>
{

}




step22:
-------
	Create a DepartmentRepository inside "com.ihub.www.repo" package.

DepartmentRepository.java
--------------------------
package com.ihub.www.repo;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Department;

@Repository
public interface DepartmentRepository extends JpaRepository<Department,Long>
{

}

step23:
-------
	Create a ResourceNotFoundException.java file inside "com.ihub.www.exception" package.

ResourceNotFoundException.java
------------------------------
package com.ihub.www.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException 
{

	private static final long serialVersionUID = 1L;

	public ResourceNotFoundException(String msg)
	{
		super(msg);
	}
}

step24:
-------
	Create and use a schema inside mysql work bench.
	ex:
		drop schema employee_management_system;
		
		create schema employee_management_system;

		use employee_management_system; 

step25:
-------
	Configure server port,database properties and hibernate properties inside application.properties file.

application.properties
----------------------
server.port= 9191

spring.datasource.driver-class-name= com.mysql.cj.jdbc.Driver
spring.datasource.url= jdbc:mysql://localhost:3306/employee_management_system
spring.datasource.username= root
spring.datasource.password= root

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.formate_sql=true;



step26:
------
	Create a EmployeeService.java file inside "com.ihub.www.service" package.

EmployeeService.java
---------------------
package com.ihub.www.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ihub.www.model.Employee;
import com.ihub.www.repo.EmployeeRepository;

@Service
public class EmployeeService 
{
	@Autowired
	EmployeeRepository employeeRepository;
	
	public Employee addEmployee(Employee employee)
	{
		return employeeRepository.save(employee);
	}
}

step27:
------
	Create a EmployeeController.java file inside "com.ihub.www.controller" package.

EmployeeController.java
-----------------------
package com.ihub.www.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Employee;
import com.ihub.www.service.EmployeeService;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api/v1")
public class EmployeeController 
{
	@Autowired
	EmployeeService employeeService;
	
	@PostMapping("/employees")
	public Employee addEmployee(@RequestBody Employee employee)
	{
		return employeeService.addEmployee(employee);
	}
}


step28:
-------
	Run spring boot starter project.

step29:
------
	Test the application by using postman tool.

	HTTP Method			url
	------------			------
	POST				http://localhost:9191/api/v1/employees

					Body  
						Raw (Json)

					{
    						 "name":"Alan Morries",
    						 "doj":"13-03-2025",
						  "dept":{
							"deptName":"IT",
							"designation":"Developer"
						   }
					}












































